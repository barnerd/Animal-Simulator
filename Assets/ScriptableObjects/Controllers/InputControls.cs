//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/ScriptableObjects/Controllers/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BarNerdGames
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Land"",
            ""id"": ""710035bd-d415-42f9-ba75-ca248d53fac3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""141b0f9d-84ba-4cdd-b1cb-3e8c7b5b18f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""dbea83f4-6c8a-4ef1-ab9b-9fc35f65b87d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7d6ec4b9-c464-4b34-88c0-0760a922e28c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Right Hand"",
                    ""type"": ""Button"",
                    ""id"": ""14586ad6-10b3-4047-8e79-26480a15d395"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Left Hand"",
                    ""type"": ""Button"",
                    ""id"": ""aefd2d89-34db-4896-8a70-da5a68562eb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""38e4d701-e6da-444d-9e8a-3a2d64235ebc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""2e840970-4827-4bf8-af8b-adc80cb43645"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack 1"",
                    ""type"": ""Button"",
                    ""id"": ""a02669cb-0390-4eea-be3a-00732aa9608c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack 2"",
                    ""type"": ""Button"",
                    ""id"": ""53f6a53c-99a7-4b8f-9e29-1882ffa21b11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack 3"",
                    ""type"": ""Button"",
                    ""id"": ""40c4a148-cfb9-4e2e-b2c7-4c74fdb2302b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""e2af9fd3-643b-4afb-bd70-90429f4caa9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b8fa157-0a98-4207-9d66-705a385f5fcd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""0bd17259-86cf-4764-aa92-a07bad818d2c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""afc45df7-8dec-4242-b74b-c07e8de058ad"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""94edf8f1-1dcb-401d-9715-c88cf3e6a449"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""872197c9-d7a8-4682-b56f-33d7a0683a8f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""67aadf02-32b6-4e29-bfdf-870206201111"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""648aadd7-8220-48a1-94c9-ce81f276a7a3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""558a7160-79b8-495c-a045-97169fbd54cf"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66d759b8-7bde-4039-a7a8-298e83b2b88a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0fa0040-b7d2-4c76-b779-005da6a7f3c7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dc96746-51b2-4da6-b2bc-f56328699e91"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""247efa5c-8760-476b-81b9-37a4b32c21e4"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48fde347-abef-4736-86a8-5c799215d7ad"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1109f2e-a1ce-4b32-9f9a-5f6b54324d31"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c80e73e-15c4-4fcf-adbe-a64c1fae57fc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb0f28b7-4c18-4d81-aeec-005743de517c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""955586ff-adde-47ca-8bb1-f8c16f163a79"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Left Hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5ee805b-05b1-4354-8c58-8ac725c608e2"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Right Hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1b45ee0-c741-4cba-8bf1-99b2904d8009"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0daf573a-ca33-4bc1-a22a-be5080c26c71"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Water"",
            ""id"": ""c5df5a37-2ba1-43b4-9dde-cdfd4718279c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b4827816-5065-422d-bebe-c7375afceacf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb739d39-b6bf-4591-a8ff-a43b4edcd66c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""0836d741-8c93-4a93-975c-3e2267b77b86"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""dd5f13ed-8c66-47d1-b4f2-4d2b9f81403e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e495354b-9bfe-4fd0-949a-4e8dc1c70573"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""7439964a-9422-4508-8426-4e65815a80d2"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""dc96dc0f-bde6-425b-b019-3b06570e43f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""497cace4-c07d-47bd-96ef-690d01fb7d36"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Land
            m_Land = asset.FindActionMap("Land", throwIfNotFound: true);
            m_Land_Move = m_Land.FindAction("Move", throwIfNotFound: true);
            m_Land_Look = m_Land.FindAction("Look", throwIfNotFound: true);
            m_Land_Interact = m_Land.FindAction("Interact", throwIfNotFound: true);
            m_Land_ActivateRightHand = m_Land.FindAction("Activate Right Hand", throwIfNotFound: true);
            m_Land_ActivateLeftHand = m_Land.FindAction("Activate Left Hand", throwIfNotFound: true);
            m_Land_Jump = m_Land.FindAction("Jump", throwIfNotFound: true);
            m_Land_Crouch = m_Land.FindAction("Crouch", throwIfNotFound: true);
            m_Land_Attack1 = m_Land.FindAction("Attack 1", throwIfNotFound: true);
            m_Land_Attack2 = m_Land.FindAction("Attack 2", throwIfNotFound: true);
            m_Land_Attack3 = m_Land.FindAction("Attack 3", throwIfNotFound: true);
            m_Land_Sprint = m_Land.FindAction("Sprint", throwIfNotFound: true);
            // Water
            m_Water = asset.FindActionMap("Water", throwIfNotFound: true);
            m_Water_Newaction = m_Water.FindAction("New action", throwIfNotFound: true);
            // Combat
            m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
            m_Combat_Newaction = m_Combat.FindAction("New action", throwIfNotFound: true);
            // Menus
            m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
            m_Menus_Newaction = m_Menus.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Land
        private readonly InputActionMap m_Land;
        private List<ILandActions> m_LandActionsCallbackInterfaces = new List<ILandActions>();
        private readonly InputAction m_Land_Move;
        private readonly InputAction m_Land_Look;
        private readonly InputAction m_Land_Interact;
        private readonly InputAction m_Land_ActivateRightHand;
        private readonly InputAction m_Land_ActivateLeftHand;
        private readonly InputAction m_Land_Jump;
        private readonly InputAction m_Land_Crouch;
        private readonly InputAction m_Land_Attack1;
        private readonly InputAction m_Land_Attack2;
        private readonly InputAction m_Land_Attack3;
        private readonly InputAction m_Land_Sprint;
        public struct LandActions
        {
            private @InputControls m_Wrapper;
            public LandActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Land_Move;
            public InputAction @Look => m_Wrapper.m_Land_Look;
            public InputAction @Interact => m_Wrapper.m_Land_Interact;
            public InputAction @ActivateRightHand => m_Wrapper.m_Land_ActivateRightHand;
            public InputAction @ActivateLeftHand => m_Wrapper.m_Land_ActivateLeftHand;
            public InputAction @Jump => m_Wrapper.m_Land_Jump;
            public InputAction @Crouch => m_Wrapper.m_Land_Crouch;
            public InputAction @Attack1 => m_Wrapper.m_Land_Attack1;
            public InputAction @Attack2 => m_Wrapper.m_Land_Attack2;
            public InputAction @Attack3 => m_Wrapper.m_Land_Attack3;
            public InputAction @Sprint => m_Wrapper.m_Land_Sprint;
            public InputActionMap Get() { return m_Wrapper.m_Land; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LandActions set) { return set.Get(); }
            public void AddCallbacks(ILandActions instance)
            {
                if (instance == null || m_Wrapper.m_LandActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LandActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @ActivateRightHand.started += instance.OnActivateRightHand;
                @ActivateRightHand.performed += instance.OnActivateRightHand;
                @ActivateRightHand.canceled += instance.OnActivateRightHand;
                @ActivateLeftHand.started += instance.OnActivateLeftHand;
                @ActivateLeftHand.performed += instance.OnActivateLeftHand;
                @ActivateLeftHand.canceled += instance.OnActivateLeftHand;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Attack1.started += instance.OnAttack1;
                @Attack1.performed += instance.OnAttack1;
                @Attack1.canceled += instance.OnAttack1;
                @Attack2.started += instance.OnAttack2;
                @Attack2.performed += instance.OnAttack2;
                @Attack2.canceled += instance.OnAttack2;
                @Attack3.started += instance.OnAttack3;
                @Attack3.performed += instance.OnAttack3;
                @Attack3.canceled += instance.OnAttack3;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }

            private void UnregisterCallbacks(ILandActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @ActivateRightHand.started -= instance.OnActivateRightHand;
                @ActivateRightHand.performed -= instance.OnActivateRightHand;
                @ActivateRightHand.canceled -= instance.OnActivateRightHand;
                @ActivateLeftHand.started -= instance.OnActivateLeftHand;
                @ActivateLeftHand.performed -= instance.OnActivateLeftHand;
                @ActivateLeftHand.canceled -= instance.OnActivateLeftHand;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @Attack1.started -= instance.OnAttack1;
                @Attack1.performed -= instance.OnAttack1;
                @Attack1.canceled -= instance.OnAttack1;
                @Attack2.started -= instance.OnAttack2;
                @Attack2.performed -= instance.OnAttack2;
                @Attack2.canceled -= instance.OnAttack2;
                @Attack3.started -= instance.OnAttack3;
                @Attack3.performed -= instance.OnAttack3;
                @Attack3.canceled -= instance.OnAttack3;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
            }

            public void RemoveCallbacks(ILandActions instance)
            {
                if (m_Wrapper.m_LandActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILandActions instance)
            {
                foreach (var item in m_Wrapper.m_LandActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LandActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LandActions @Land => new LandActions(this);

        // Water
        private readonly InputActionMap m_Water;
        private List<IWaterActions> m_WaterActionsCallbackInterfaces = new List<IWaterActions>();
        private readonly InputAction m_Water_Newaction;
        public struct WaterActions
        {
            private @InputControls m_Wrapper;
            public WaterActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Water_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Water; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WaterActions set) { return set.Get(); }
            public void AddCallbacks(IWaterActions instance)
            {
                if (instance == null || m_Wrapper.m_WaterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WaterActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IWaterActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IWaterActions instance)
            {
                if (m_Wrapper.m_WaterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWaterActions instance)
            {
                foreach (var item in m_Wrapper.m_WaterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WaterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WaterActions @Water => new WaterActions(this);

        // Combat
        private readonly InputActionMap m_Combat;
        private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
        private readonly InputAction m_Combat_Newaction;
        public struct CombatActions
        {
            private @InputControls m_Wrapper;
            public CombatActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Combat_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Combat; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
            public void AddCallbacks(ICombatActions instance)
            {
                if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(ICombatActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(ICombatActions instance)
            {
                if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICombatActions instance)
            {
                foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CombatActions @Combat => new CombatActions(this);

        // Menus
        private readonly InputActionMap m_Menus;
        private List<IMenusActions> m_MenusActionsCallbackInterfaces = new List<IMenusActions>();
        private readonly InputAction m_Menus_Newaction;
        public struct MenusActions
        {
            private @InputControls m_Wrapper;
            public MenusActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Menus_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Menus; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
            public void AddCallbacks(IMenusActions instance)
            {
                if (instance == null || m_Wrapper.m_MenusActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MenusActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IMenusActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IMenusActions instance)
            {
                if (m_Wrapper.m_MenusActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMenusActions instance)
            {
                foreach (var item in m_Wrapper.m_MenusActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MenusActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MenusActions @Menus => new MenusActions(this);
        public interface ILandActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnActivateRightHand(InputAction.CallbackContext context);
            void OnActivateLeftHand(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnAttack1(InputAction.CallbackContext context);
            void OnAttack2(InputAction.CallbackContext context);
            void OnAttack3(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
        }
        public interface IWaterActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface ICombatActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface IMenusActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
